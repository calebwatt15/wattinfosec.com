<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>WattInfoSec</title><link href="https://wattinfosec.com/" rel="alternate"></link><link href="https://wattinfosec.com/feeds/webapp-ssecurity.atom.xml" rel="self"></link><id>https://wattinfosec.com/</id><updated>2015-12-13T00:00:00-06:00</updated><entry><title>Authorization Checks Should Use Different Passwords</title><link href="https://wattinfosec.com/authorization-checks-should-use-different-passwords.html" rel="alternate"></link><updated>2015-12-13T00:00:00-06:00</updated><author><name>Caleb</name></author><id>tag:wattinfosec.com,2015-12-13:authorization-checks-should-use-different-passwords.html</id><summary type="html">&lt;h2&gt;Insufficient Authorization&lt;/h2&gt;
&lt;p&gt;In web apps, every once in a while a user can change another user's account details by intercepting a request to change their own details, and modify some parameter in the request. This is often accomplished by modifying either an ID number, a username, or some other ID. In many cases, this means that an attacker may be able to create an account, then alter another account's password by trying to change their own, capture the request, and modify a username that is otherwise marked uneditable on the front end. &lt;/p&gt;
&lt;h2&gt;In Real Life&lt;/h2&gt;
&lt;p&gt;In a recent assessment, I ran accross this sort of problem. It is a moderately common Insufficient Authorization vulnerability. This was a special case though. The web application in question used an email address as the login username. This could not be changed once it was set. Even administrators were forbidden from editing any users' email addresses. In this case, the Account Details page has the "Email" field marked "Disabled", so that it could not be edited. If a user captured the request in a proxy, they could then edit the Email.&lt;/p&gt;
&lt;p&gt;This lead to an interesting find. As a standard user, named "standard@test.com" I set my email to the admin user, named "admin@test.com". This let me change my email to the admin's login. Sadly, when I tried to login with "admin@test.com" and standard's password, it failed. However, if I tried to authenticate using "admin@test.com" and the normal admin password, it worked. &lt;/p&gt;
&lt;p&gt;Given this I assumed that the edit did not work since, admin@test.com was already a user, however I was wrong. Although it did not make my standard user now have the admin username, it changed the admin account have the first and last name, and permissions of the lower, Standard user. This, in effect, forced the admin to have lower permissions, denying that admin the ability to perform admin duties. The admin had been forced into the standard user permissions, with the first and last name of the standard user. &lt;/p&gt;
&lt;p&gt;I may not have realized this as quickly, had I used the same password for both users. I would have assumed that the lower user took over the Admin account, as it would have been the lower user's password, name, and permissions. As is, this specific application allowed me to give another user my account, but it still had the proper username and password that they originally set. This would have been much harder, if even possible to notice without a different password for each user.&lt;/p&gt;
&lt;h2&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;Set all test accounts to different passwords, as during tests you will be more easily able to determine if a forced account change changed a user, or took over another account.&lt;/p&gt;</summary><category term="WebApp Security"></category></entry></feed>