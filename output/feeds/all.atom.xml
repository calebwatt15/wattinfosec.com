<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>WattInfoSec</title><link href="https://wattinfosec.com/" rel="alternate"></link><link href="https://wattinfosec.com/feeds/all.atom.xml" rel="self"></link><id>https://wattinfosec.com/</id><updated>2015-10-30T16:25:00-05:00</updated><entry><title>Vulnerability Reporting Database</title><link href="https://wattinfosec.com/vulnerability-reporting-database.html" rel="alternate"></link><updated>2015-10-30T16:25:00-05:00</updated><author><name>Caleb</name></author><id>tag:wattinfosec.com,2015-10-30:vulnerability-reporting-database.html</id><summary type="html">&lt;h2&gt;VRDB&lt;/h2&gt;
&lt;p&gt;I felt that there was lack of a decent open-sourced vulnerability database for writing vulnerability reports. CWE is kind of close, but does not have enough detail for specifics. This project is designed to fill that gap, and allow smaller shops to have a template for vulnerability reporting, without the resources of larger shops.&lt;/p&gt;
&lt;p&gt;It seems that nearly every vulnerability assessment shop has their own proprietary vulnerability reporting database. HP has one, IOActive has one, Whitehat has one. They all specialize and write custom vulnerability descriptions based on their expertise. This is all well and good. It makes their report writing immensely easier, and from what I have seen, they all have pretty good reports.&lt;/p&gt;
&lt;h2&gt;Purpose&lt;/h2&gt;
&lt;p&gt;I figured report writing is something rarely covered in new Tester education, and there are very few Vuln databases that do not focus on particular vulnerabilities. &lt;a href="http://osvdb.org/" title="OSVDB"&gt;OSVDB&lt;/a&gt; has thousands of particular vulnerabilities, and &lt;a href="https://web.nvd.nist.gov/view/vuln/search" title="NVD CVE"&gt;NVD CVE&lt;/a&gt; likewise has many known specific vulnerabilities, but if a vulnerability assessor is performing a test and finds a buffer overflow in a client-built application, that specific vulnerability is likely not in OSVDB or does not have a CVE. As such, the tester would benefit from having a default description and solution for that finding.&lt;/p&gt;
&lt;p&gt;As such, I have started writing the Vulnerability Reporting Database, or 
&lt;a href="https://github.com/calebwatt15/vrdb" title="vrdb"&gt;vrdb&lt;/a&gt;. 
It is (at this time) written in JSON, should be easily portable across many languages (many have a JSON parser) At this time, the database is small (there are only a handful of vulnerabilities in it that I have inserted during testing.) Most of them are Web Application vulnerabilities, using mostly descriptions and solutions from OWASP. I do plan on adding many more types of vulnerabilities, such as thick client, network, SAP, etc.&lt;/p&gt;
&lt;p&gt;In addition to the database, I have written a simple &lt;a href="https://github.com/calebwatt15/vrdbTool" title="vrdbTool"&gt;python script&lt;/a&gt; to write the JSON so I do not misformat it, that can also be found on GitHub. It is pretty hacky at this point, and is a project unto itself. Since the code in it is not very good, it should remain seperate  from the vrdb proper.&lt;/p&gt;</summary><category term="vrdb"></category><category term="project"></category></entry><entry><title>Attacking JSON only sites with CSRF</title><link href="https://wattinfosec.com/attacking-json-only-sites-with-csrf.html" rel="alternate"></link><updated>2015-09-23T13:13:00-05:00</updated><author><name>Caleb</name></author><id>tag:wattinfosec.com,2015-09-23:attacking-json-only-sites-with-csrf.html</id><summary type="html">&lt;h2&gt;The Background&lt;/h2&gt;
&lt;p&gt;The web has been built around the idea of a &lt;a href="https://www.w3.org/Security/wiki/Same_Origin_Policy" title="W3 - Same Origin Policy"&gt;same origin policy&lt;/a&gt;, and to get around that, &lt;a href="http://www.w3.org/TR/cors/" title="W3 - Cross-Origin Resource Sharing"&gt;CORS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The jist of this is that "odd" requests can not be sent to one domain from another. CORS allows web sites to ignore this, or allow certain domains to send "odd" requests. "Odd" here means anything that is not POST or GET. It also blocks many content types, such as application/xml or application/json. Many API based sites use PUT or DELETE calls in order to make requests. This makes them practically non-CSRF'able. Many sites also use all JSON requests, which should in-theory act the same way. Since an attacker can not force another domain to send application/json to a seperate domain.&lt;/p&gt;
&lt;h2&gt;The Fun Part&lt;/h2&gt;
&lt;p&gt;In my experience, many JSON parsers do not quite conform to the JSON RFC. According to the spec, JSON has a content type as follows:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;content-type: application/json&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;As such, an attacker can not make their own personal domain send an XHR request with this content type, without the browser flagging it, and sending a CORS preflight reqeust to ask for permission from the other domain. The problem lies in that many JSON parsers do not actually check the Request headers. They are not actually confirming that this was a "JSON" request, so much as it looks like a JSON request. In many cases, an attacker can create an XHR request on their domain to send a body with a JSON formatted text, but includes a content-type header set to text/plain. Because the content type is not "odd", the browser will not flag the request, and will send this XHR request without first sending the CORS preflight request. &lt;/p&gt;
&lt;p&gt;I have tested this in PHP using the default json_decode. It works fine, without additional code, json_decode() does not check the content-type header. As such, any site written in PHP, using all JSON requests, is probably still vulnerable to CSRF attacks. &lt;/p&gt;
&lt;h2&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;Basically OWASP recommends using randomized nonces (a random token) in the body of every request. This token should be long and have good entropy. It should also be a different token for every reqeust, for every session. Further reading can be found at &lt;a href="https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)" title="OWASP - CSRF"&gt;OWASP - CSRF&lt;/a&gt;. It is not sufficient to depend on Same Origin policy. Even with other HTTP Verbs, such as PUT or DELETE. CORS and SOP have been bypassed in the past, and will be again.&lt;/p&gt;
&lt;p&gt;As for attackers, before you write off a JSON only site as non-CSRF'able, make sure to try changing up the content-type headers. You may be able to attack this nonetheless.&lt;/p&gt;</summary><category term="WebApp Security"></category><category term="CSRF"></category><category term="Red Team"></category></entry></feed>